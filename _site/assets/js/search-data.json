{
  
  "0": {
    "title": "",
    "content": "404 . Page not found :( . The requested page could not be found. .",
    "url": "http://localhost:4000/404.html",
    "relUrl": "/404.html"
  }
  ,"1": {
    "title": "Gem",
    "content": "Gem 常用指令 . gem -v # 查看 gem 版本 gem source # 查看 gem 配置源 gem source -l # 查看 gem 配置源目录 gem sources -a url # 添加 gem 配置源（url 需换成网址） gem sources --add url # 添加 gem 配置源（url 需换成网址） gem sources -r url # 删除 gem 配置源（url 需换成网址） gem sources --remove url # 删除 gem 配置源（url 需换成网址） gem update # 更新 所有包 gem update --system # 更新 Ruby Gems 软件 gem install rake # 安装 rake，从本地或远程服务器 gem install rake --remote # 安装 rake，从远程服务器 gem install watir -v 1.6.2 # 安装 指定版本的 watir gem install watir --version 1.6.2 # 安装 指定版本的 watir gem uninstall rake # 卸载 rake 包 gem list d # 列出 本地以 d 打头的包 gem query -n &#39;&#39;[0-9]&#39;&#39; --local # 查找 本地含有数字的包 gem search log --both # 查找 从本地和远程服务器上查找含有 log 字符串的包 gem search log --remoter # 查找 只从远程服务器上查找含有 log 字符串的包 gem search -r log # 查找 只从远程服务器上查找含有log字符串的包 gem help # 提醒式的帮助 gem help install # 列出 install 命令 帮助 gem help examples # 列出 gem 命令使用一些例子 gem build rake.gemspec # 把 rake.gemspec 编译成 rake.gem gem check -v pkg/rake-0.4.0.gem # 检测 rake 是否有效 gem cleanup # 清除 所有包旧版本，保留最新版本 gem contents rake # 显示 rake 包中所包含的文件 gem dependency rails -v 0.10.1 # 列出 与 rails 相互依赖的包 gem environment # 查看 gem 的环境 sudo gem -v # 查看 gem 版本（以管理员权限） sudo gem install cocoa pods # 安装 CocoaPods（以管理员权限） sudo gem install cocoapods # 安装 CocoaPods（以管理员权限） sudo gem install cocoapods --pre # 安装 CocoaPods 至预览版（以管理员权限） sudo gem install cocoapods -v 0.39.0 # 安装 CocoaPods 指定版本（以管理员权限） sudo gem update cocoapods # 更新 CocoaPods 至最新版（以管理员权限） sudo gem update cocoapods --pre # 更新 CocoaPods 至预览版（以管理员权限） sudo gem uninstall cocoapods -v 0.39.0 # 移除 CocoaPods 指定版本（以管理员权限） .",
    "url": "http://localhost:4000/Node/Gem%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html",
    "relUrl": "/Node/Gem%20%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4.html"
  }
  ,"2": {
    "title": "常用工具",
    "content": "常用工具 . 当前分组记录一些常用工具的指令&amp;注意事项. . 目录 . 常用工具 | .",
    "url": "http://localhost:4000/Node/Node.html",
    "relUrl": "/Node/Node.html"
  }
  ,"3": {
    "title": "Swift",
    "content": "Swift 学习文档 .",
    "url": "http://localhost:4000/Swift/SwiftDoc.html",
    "relUrl": "/Swift/SwiftDoc.html"
  }
  ,"4": {
    "title": "SwiftUI",
    "content": ". . 本文参考 SwiftUI 官方示例 并将探索结果记录于此，希望能够对你有所帮助。 . 对于本文所述内容，默认你已有一定的基于 Swift 语言的开发经验，故不会详细的叙述每个细节；如果对 Swift 语法有疑问，可先学习 Swift 语法。 . 有关 SwiftUI 的疑问，可加入 SwiftUI QQ 交流群：18552966 ，共同探讨。 . English 📔 . Whats New in SwiftUI? . 截图 . |View|Layout| |:—:|:—:| ||| . 💻 所需环境 . macOS 15 | Xcode 11.0 | iOS 13.0 | . 📂 目录： . 基础控件 . Text 文本 Text | TextField | SecureField | . | Image 图片 Image | WebImage | . | Button 按钮 Button | PullDownButton | ItemBasedPopUpButton | NavigationButton | PresentationButton | EditButton | PasteButton | . | Picker 选择器 Picker | DatePicker | Toggle | Slider | Stepper | SegmentedControl | . | 特殊视图 WebView | UIViewController | . | . 布局 . Stacks HStack | VStack | ZStack | . | List 列表 List | ScrollView | ForEach | . | Container Views 容器视图 Group | GroupBox | Section | Form | . | Architectural Views 导航、切换、排列 NavigationView | TabView | HSplitView | VSplitView | . | Alert 弹框、选择 Alert | Modal | Popover | Sheet | ActionSheet | . | . State and Data Flow 状态和数据流 . Bindings Binding | . | Data-Dependent Views State | ObjectBinding | EnvironmentObject | . | Environment Values Environment | EnvironmentValues | . | ENavigation Models DynamicNavigationDestinationLink | . | Preferences LocalizedStringKey | . | Transactions Transaction | . | . 手势 . Basic Gestures 基本手势 TapGesture | LongPressGesture | DragGesture | MagnificationGesture | RotationGesture | . | Combined Gestures 合并手势 SequenceGesture | SimultaneousGesture | ExclusiveGesture | . | Custom Gestures 自定义手势 AnyGesture | . | . 基础控件 . Text . Text 用来展示一行或多行的文本内容，效果等同于 UILabel，但更加优秀。 如果要创建 Text， 只需通过 Text(&quot;SwiftUI&quot;) 即可创建； 采用链式语法，也可以为文本添加多项属性，如字体、颜色、阴影、上左下右的间距等。 . 示例： . Text(&quot;SwiftUI&quot;) .foregroundColor(.orange) .bold() .font(.system(.largeTitle)) .fontWeight(.medium) .italic() .shadow(color: .black, radius: 1, x: 0, y: 2) . 查看运行效果 HStack 和 VStack 控件用于承载多个视图，在后面会提到。 . 🔝 . TextField . TextField 用来添加普通的输入框，一般常用作文本输入。 . 示例： . TextField(self.$name, placeholder: self.nameText, onEditingChanged: { changed in print(&quot;onEditing: (changed)&quot;) }) { print(&quot;userName: (self.name)&quot;) self.endEditing(true) }} .padding(10) .frame(height: 50) .textFieldStyle(RoundedBorderTextFieldStyle()) .padding(EdgeInsets(top: 0, leading: 20, bottom: 0, trailing: 20)) . 查看运行效果 🔝 . SecureField . SecureField 一般作为密码输入时使用，使用方式与 TextField 并无差别，示例与运行效果同上 TextField。 . Image . Image 控件用于展示图片。 . 示例： . Image(&quot;icon&quot;) .resizable() .frame(width: 100, height: 100, alignment: .center) . 查看运行效果 🔝 . WebImage . webImage 用于下载网络图片，使用的 URLSession下载成功后替换原有 Image；你也可以在 downloadWebImage 方法中使用 Kingfisher 。 . 示例： . var body: some View { Image(uiImage: self.uiImage ?? placeholderImage) .resizable() .onAppear(perform: downloadWebImage) .frame(width: 80, height: 80, alignment: .center) .onTapGesture { print(&quot;Tap &quot;) } } . 查看运行效果 🔝 . Button . Button 用于响应点击事件。 . 示例： . Button(action: { print(&quot;Tap&quot;) }) { Text(&quot;I&#39;m a Button&quot;) } . PullDownButton . 尚未发布 . ItemBasedPopUpButton . 尚未发布 . NavigationButton 已弃用 . NavigationButtonPage 用以 Push 到下一个导航页面。 . 示例： . NavigationLink(destination: NavigationButtonPage()) { Text(&quot;NavigationButton&quot;).bold() .foregroundColor(.orange) .font(.largeTitle) } .navigationBarTitle(Text(&quot;Page&quot;)) . 查看运行效果 🔝 . PresentationButton . PresentationButton 用以弹出一个页面。 已经弃用了，请使用 NavigationLink . 🔝 . EditButton . EditButton 用以触发编辑状态，使用时只需在 navigationBarItems 设置即可。 . 示例： . navigationBarItems(trailing: EditButton()) . 查看运行效果 🔝 . PasteButton . 尚未发布 . Picker . Picker 可自定义数据源的选择器。 . 示例: . Picker(selection: $leftIndex, label: Text(&quot;Picker&quot;)) { ForEach(0..&lt;leftSource.count) { Text(self.leftSource[$0]).tag($0) } }.frame(width: UIScreen.main.bounds.width/2) . 查看运行效果 🔝 . DatePicker . DatePicker 用于选择绝对日期的控件。 . 示例： . DatePicker(selection: $server.date, in: server.spaceDate, displayedComponents: .date, label: { Text(&quot;&quot;) }) . 查看运行效果 🔝 . Toggle . Toggle 用于切换选中状态。 . 示例： . Toggle(isOn: $isOn) { Text(&quot;State: (self.isOn == true ? &quot;开&quot;:&quot;关&quot;)&quot;) }.padding(20) . 查看运行效果 🔝 . Slider . Slider 用于从有限值范围中选值的控件。 . 示例： . Slider(value: $data.rating) . 查看运行效果 🔝 . Stepper . Stepper 用以增加或减少数值。 . 示例： . Stepper(value: $value, step: 2, onEditingChanged: { c in print(c) }) { Text(&quot;Stepper Value: (self.value)&quot;) }.padding(50) . 查看运行效果 🔝 . SegmentedControl 已经弃用了 . SegmentedControl 用以分段条件选择。 . 示例： . SegmentedControl(selection: $currentIndex) { ForEach(0..&lt;items.count) { index in Text(self.items[index]).tag(index) } }.tapAction { print(&quot;currentIndex: (self.currentIndex)&quot;) } . 查看完整示例及运行效果 🔝 . WebView . WebView 用于展示一个打开的网页。 . 示例: . struct WebViewPage : UIViewRepresentable { func makeUIView(context: Context) -&gt; WKWebView { return WKWebView() } func updateUIView(_ uiView: WKWebView, context: Context) { let req = URLRequest(url: URL(string: &quot;https://www.apple.com&quot;)!) uiView.load(req) } } . 查看运行效果 🔝 . UIViewController . UIViewController 用于展示在 SwiftUI 中打开 UIKit 的 UIViewController ，并且在 UIViewController 中打开 SwiftUI View。 . 示例: . 先定义： . struct ControllerPage&lt;T: UIViewController&gt; : UIViewControllerRepresentable { typealias UIViewControllerType = UIViewController func makeUIViewController(context: UIViewControllerRepresentableContext&lt;ControllerPage&gt;) -&gt; UIViewController { return T() } func updateUIViewController(_ uiViewController: UIViewController, context: UIViewControllerRepresentableContext&lt;ControllerPage&gt;) { debugPrint(&quot; (#function)： (type(of: T.self))&quot;) } } . 然后调用： . NavigationButton(destination: ControllerPage&lt;UIKitController&gt;()) { PageRow(title: &quot;UIViewController&quot;,subTitle: &quot;打开 UIViewController&quot;) } . 查看运行效果 🔝 . 布局 . HStack . HStack 用于将子视图排列在水平线上的视图。 . 示例: . HStack { Text(&quot;made in China.&quot;) Divider() // Just add a line. Text(&quot;the People&#39;s Republic Of China.&quot;) } . 查看运行效果 🔝 . VStack . VStack 用于将子视图排列在垂直线上的视图。 . 示例: . VStack { Text(&quot;made in China.&quot;) Divider() // Just add a line. Text(&quot;the People&#39;s Republic Of China.&quot;) } . 查看运行效果 🔝 . ZStack . ZStack 用于覆盖子视图，在两轴上对齐。 . 示例: . ZStack { Text(&quot;made in China.&quot;) Divider() // Just add a line. Text(&quot;the People&#39;s Republic Of China.&quot;) } . 查看运行效果 🔝 . List . List 列表容器，用以显示一列数据。 . 示例: . List(0..&lt;5) { item in Text(&quot;Hello World !&quot;) }.navigationBarTitle(Text(&quot;List&quot;), displayMode: .large) . 查看运行效果 🔝 . ScrollView . ScrollView 是一个滚动视图容器。 . 示例: . ScrollView { Text(&quot;SwiftUI&quot;).padding(20) Divider() Image(&quot;icon&quot;).resizable() .frame(width: 300, height: 300, alignment: .center) Divider() Text(&quot;Views and ... user interface.&quot;) } .border(Color.gray.gradient, width: 1) .cornerRadius(10) .padding(10) .navigationBarTitle(Text(&quot;ScrollView&quot;)) . 查看运行效果 🔝 . ForEach . ForEach 用于根据已有数据的集合展示视图。 . 示例: . let data = (0..&lt;5) var body: some View { ForEach(data) { e in Text(&quot;Hello (e)&quot;) .bold() .font(.system(size: 25, design: .monospaced)) .padding(5) } . 查看运行效果 🔝 . Group . Group 用于集合多个视图，对 Group 设置的属性，将作用于每个子视图。 . 示例: . Group { Text(&quot;Hello World !&quot;) Text(&quot;Hello World !&quot;) } . 查看运行效果 🔝 . GroupBox . 尚未发布 . Section . Section 用于创建带头/尾部的视图内容，一般结合 List 组件使用。 . 示例: . Section(header: Text(&quot;I&#39;m header&quot;), footer: Text(&quot;I&#39;m footer&quot;)) { ForEach(0..&lt;3) { Text(&quot;Hello ($0)&quot;) } } . 查看运行效果 Form . Form 是对一组数据输入进行控制的容器。 . Example: . Form { TextField(&quot;First Name&quot;, text: $firstName) TextField(&quot;Last Name&quot;, text: $lastName) } . 查看运行效果 🔝 . NavigationView . NavigationView 用于创建包含顶部导航栏的视图容器。 . 示例: . NavigationView { Text(&quot;🧚‍♂️🧚‍♀️🧜‍♂️🧜‍♀️🧞‍♂️🧞‍♀️&quot;).blur(radius: 5) Text(&quot;Swifter Swifter&quot;) .bold() .foregroundColor(.orange) .font(.largeTitle) } .navigationBarTitle(Text(&quot;NavigationView&quot;)) . 查看运行效果 🔝 . TabView . TabView 用于创建包含底部 ** TabBar** 的视图容器。 . 示例: . TabView(selection: $index) { ForEach(0..&lt;imgs.count) { item in TabItemPage(index: item) .tabItem{ Image(self.imgs[item]) Text(&quot; (item)&quot;) } .tag(item) } } . 查看运行效果 🔝 . HSplitView . 尚未发布 . VSplitView . 尚未发布 . Alert . Alert 用于展示一个弹框提醒，需要与点击事件关联起来。 . 示例: . alert(isPresented: $showAlert, content: { Alert(title: Text(&quot;确定要支付这100000000美元吗？&quot;), message: Text(&quot;请谨慎操作 n一旦确认，钱款将立即转入对方账户&quot;), primaryButton: .destructive(Text(&quot;确认&quot;)) { print(&quot;转出中...&quot;) }, secondaryButton: .cancel()) }).navigationBarTitle(Text(&quot;Alert&quot;)) . 查看运行效果 🔝 . ActionSheet . ActionSheet 用于弹出一个选择框。 . 示例: . ActionSheet(title: Text(&quot;Title&quot;), message: Text(&quot;Message&quot;), buttons: [.default(Text(&quot;Default&quot;), onTrigger: { print(&quot;Default&quot;) self.showSheet = false }),.destructive(Text(&quot;destructive&quot;), onTrigger: { print(&quot;destructive&quot;) self.showSheet = false }),.cancel({ print(&quot;Cancel&quot;) self.showSheet = false })]) . 使用： . .actionSheet(isPresented: $showSheet, content: {sheet}) . 查看运行效果 🔝 . Modal . Modal 用于弹出一个视图。 . 示例: . Modal(Text(&quot;Modal View&quot;),onDismiss: { print(&quot;View Dismiss !&quot;) }) . 查看运行效果 🔝 . Popover . Popover 用于弹出一个视图，样式见下方运行结果。 . 示例: . .popover(isPresented: $showPop, content: { ImagePage() }) . 查看运行效果 🔝 . 📎 About . 以上示例中所涉及代码，皆在本仓库代码中，建议下载并运行查看。 | 如果有关于 SwiftUI 更好的用法与建议，期待能够一起分享！ | 如果本文示例内容有疏漏和错误之处，欢迎提 Issue ！ | . ✉️ Contacts . email : hi@jinxiansen.com . 微博 : @晋先森 . 📄 License . SwiftUI is released under the MIT license. See LICENSE for details. .",
    "url": "http://localhost:4000/Swift/SwiftUI/SwiftUI_Base.html",
    "relUrl": "/Swift/SwiftUI/SwiftUI_Base.html"
  }
  ,"5": {
    "title": "About",
    "content": "This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com . You can find the source code for Minima at GitHub: jekyll / minima . You can find the source code for Jekyll at GitHub: jekyll / jekyll .",
    "url": "http://localhost:4000/about/",
    "relUrl": "/about/"
  }
  ,"6": {
    "title": "按钮",
    "content": "Buttons . 目录 . 基本按钮样式 看起来像按钮的链接 | 按钮元素 | | 通过按钮使用实用程序 Button size | 按钮之间的间距 | | . 基本按钮样式 . 看起来像按钮的链接 . 链接按钮 . 链接按钮 链接按钮 链接按钮 . Link button . [链接按钮](http://example.com/){: .btn } [链接按钮](http://example.com/){: .btn .btn-purple } [链接按钮](http://example.com/){: .btn .btn-blue } [链接按钮](http://example.com/){: .btn .btn-green } [链接按钮](http://example.com/){: .btn .btn-outline } . 按钮元素 . GitHub Flavored Markdown不支持该button元素, 因此您必须为此使用内联HTML: . 按钮元素 &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;Button element&lt;/button&gt; . . 通过按钮使用实用程序 . Button size . 将按钮包装在使用 font-size 实用程序类 缩放按钮的容器中: . Big ass button . Tiny ass button . &lt;span class=&quot;fs-8&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; . 按钮之间的间距 . 使用 margin utility classes 在同一块中的两个按钮之间添加间距. . 带空格的按钮 按钮 . 具有更大空间的按钮 按钮 . [带空格的按钮](http://example.com/){: .btn .btn-purple .mr-2 } [按钮 ](http://example.com/){: .btn .btn-blue } [具有更大空间的按钮](http://example.com/){: .btn .btn-green .mr-4 } [按钮 ](http://example.com/){: .btn .btn-blue } .",
    "url": "http://localhost:4000/docs/ui-components/buttons.html",
    "relUrl": "/docs/ui-components/buttons.html"
  }
  ,"7": {
    "title": "代码块",
    "content": "Code . 目录 . 内联代码 | 语法突出显示的代码块 | 带有渲染示例的代码块 | . 内联代码 . 可以通过将代码包装在单个反勾中来内嵌呈现代码. . Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . . 语法突出显示的代码块 . 使用Roky将Jekyll的内置语法高亮显示在色块中,方法是使用三个反引号,可注明语言名称: . // 带有语法突出显示的Java代码. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . js // 带有语法突出显示的Java代码. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . . 带有渲染示例的代码块 . 为了演示前端代码, 有时显示该代码的渲染示例很有用. 在包含了需要显示渲染的项目样式之后，可以将&lt;div&gt;与code-example类一起使用, 后跟代码块语法. 如果要使用Markdown而不是HTML呈现输出, 请使用markdown=&quot;1&quot;属性告诉Jekyll您正在呈现的代码将采用Markdown格式…这将获取元数据… . Link button . [Link button](http://example.com/){: .btn } . &lt;div class=&quot;code-example&quot; markdown=&quot;1&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/div&gt; markdown [Link button](http://example.com/){: .btn } .",
    "url": "http://localhost:4000/docs/ui-components/code.html",
    "relUrl": "/docs/ui-components/code.html"
  }
  ,"8": {
    "title": "Color",
    "content": "Color Utilities . . Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. . Light Greys . Color value Font color utility Background color utility . grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . Dark Greys . Color value Font color utility Background color utility . grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . Purples . Color value Font color utility Background color utility . purple-000 | .text-purple-000 | .bg-purple-000 | . purple-100 | .text-purple-100 | .bg-purple-100 | . purple-200 | .text-purple-200 | .bg-purple-200 | . purple-300 | .text-purple-300 | .bg-purple-300 | . Blues . Color value Font color utility Background color utility . blue-000 | .text-blue-000 | .bg-blue-000 | . blue-100 | .text-blue-100 | .bg-blue-100 | . blue-200 | .text-blue-200 | .bg-blue-200 | . blue-300 | .text-blue-300 | .bg-blue-300 | . Greens . Color value Font color utility Background color utility . green-000 | .text-green-000 | .bg-green-000 | . green-100 | .text-green-100 | .bg-green-100 | . green-200 | .text-green-200 | .bg-green-200 | . green-300 | .text-green-300 | .bg-green-300 | . Yellows . Color value Font color utility Background color utility . yellow-000 | .text-yellow-000 | .bg-yellow-000 | . yellow-100 | .text-yellow-100 | .bg-yellow-100 | . yellow-200 | .text-yellow-200 | .bg-yellow-200 | . yellow-300 | .text-yellow-300 | .bg-yellow-300 | . Reds . Color value Font color utility Background color utility . red-000 | .text-red-000 | .bg-red-000 | . red-100 | .text-red-100 | .bg-red-100 | . red-200 | .text-red-200 | .bg-red-200 | . red-300 | .text-red-300 | .bg-red-300 | .",
    "url": "http://localhost:4000/docs/utilities/color.html",
    "relUrl": "/docs/utilities/color.html"
  }
  ,"9": {
    "title": "组态",
    "content": "组态 . Just the Docs 具有一些特定的配置参数，可以在您的Jekyll网站的_config.yml文件中定义这些参数. . 目录 . 网站徽标 | 搜索 | 辅助链接 | 标题锚链接 | 页脚内容 | 配色方案 | 谷歌分析 | . 以该站点的 _config.yml 文件为例. . 网站徽标 . # 将路径/ URL设置为将显示的logo而不是标题 logo: &quot;/assets/images/just-the-docs.png&quot; . 搜索 . # 启用或禁用站点搜索 # 支持true（默认）或false search_enabled: true # 启用对带连字符的搜索词的支持: search_tokenizer_separator: /[ s/]+/ . 辅助链接 . # 右上方导航的辅助链接 aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; . 标题锚链接 . # 标题锚点链接显示在页面内容中的h1-h6标签上 # 允许用户深入链接到页面上的特定标题. # # 支持true（默认）或false/nil heading_anchors: true . 页脚内容 . # Footer content appears at the bottom of every page&#39;s main content footer_content: &quot;Copyright &amp;copy; 2017-2019 Patrick Marsceill. Distributed by an &lt;a href= &quot;https://github.com/pmarsceill/just-the-docs/tree/master/LICENSE.txt &quot;&gt;MIT license.&lt;/a&gt;&quot; . 配色方案 . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . 预览深色方案 . 有关更多信息, 请参见 自定义. . 谷歌分析 . # Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 .",
    "url": "http://localhost:4000/docs/configuration.html",
    "relUrl": "/docs/configuration.html"
  }
  ,"10": {
    "title": "定制",
    "content": "定制 . 目录 . 配色方案 | 特定的视觉定制 | 替代样式 | . 配色方案 . 新 . Just the Docs 支持两种配色方案: light (default), 和 dark. . 要启用配色方案, 请使用 color_scheme 在您的站点_config.yml 文件中设置参数: . 例 . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . 查看深色方案 . 特定的视觉定制 . 要自定义网站的外观，请_sass/custom/custom.scss在编辑器中打开以查看是否存在可以覆盖的变量. 大多数样式（如字体,颜色,间距等）均来自这些变量. 要覆盖特定变量,请取消注释其行并更改其值。 . 例如,要将链接颜色从紫色默认值更改为蓝色,请打开_sass/custom/custom.css并$link-color在line上找到变量50. 取消注释, 然后将其值更改为我们的$blue-000变量或您选择的其他阴影. . 例 . // ... // // $body-text-color: $grey-dk-100; // $body-heading-color: $grey-dk-300; $link-color: $blue-000; // // ... . Note: _sass/support/variables.scss 建议不要直接在其中编辑变量, 否则可能导致其他依赖项失败. . 替代样式 . 对于未定义为变量的样式, 您可能需要修改特定的CSS类. 要在级联末尾添加自己的CSS替代, 请编辑_sass/overrides.scss. 这将允许所有替代保存在单个文件中, 并且任何上游更改仍将应用。 . 例如, 如果您想添加自己的样式来打印页面, 则可以添加以下样式. . 例 . // Print-only styles. @media print { .side-bar, .page-header { display: none; } .main-content { max-width: auto; margin: 1em;} } .",
    "url": "http://localhost:4000/docs/customization.html",
    "relUrl": "/docs/customization.html"
  }
  ,"11": {
    "title": "Markdown kitchen sink",
    "content": "Text can be bold, italic, or strikethrough. . Link to another page. . There should be whitespace between paragraphs. . There should be whitespace between paragraphs. We recommend including a README, or a file with information about your project. . Header 1 . This is a normal paragraph following a header. GitHub is a code hosting platform for version control and collaboration. It lets you and others work together on projects from anywhere. . Header 2 . This is a blockquote following a header. . When something is important enough, you do it even if the odds are not in your favor. . Header 3 . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . # Ruby code with syntax highlighting GitHubPages::Dependencies.gems.each do |gem, version| s.add_dependency(gem, &quot;= #{version}&quot;) end . Header 4 . This is an unordered list following a header. | This is an unordered list following a header. | This is an unordered list following a header. | . Header 5 . This is an ordered list following a header. | This is an ordered list following a header. | This is an ordered list following a header. | Header 6 . head1 head two three . ok | good swedish fish | nice | . out of stock | good and plenty | nice | . ok | good oreos | hmm | . ok | good zoute drop | yumm | . There’s a horizontal rule below this. . . Here is an unordered list: . Item foo | Item bar | Item baz | Item zip | . And an ordered list: . Item one | Item two | Item three | Item four | And a nested list: . level 1 item level 2 item | level 2 item level 3 item | level 3 item | . | . | level 1 item level 2 item | level 2 item | level 2 item | . | level 1 item level 2 item | level 2 item | . | level 1 item | . Nesting an ol in ul in an ol . level 1 item (ul) level 2 item (ol) | level 2 item (ol) level 3 item (ul) | level 3 item (ul) | . | | level 1 item (ul) level 2 item (ol) | level 2 item (ol) level 3 item (ul) | level 3 item (ul) | . | level 4 item (ol) | level 4 item (ol) level 3 item (ul) | level 3 item (ul) | . | | level 1 item (ul) | . And a task list . Hello, this is a TODO item | Hello, this is another TODO item | Goodbye, this item is done | . Small image . . Large image . . Definition lists can be used with HTML syntax. . Name Godzilla Born 1952 Birthplace Japan Color Green Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. . The final element. .",
    "url": "http://localhost:4000/docs/index-test.html",
    "relUrl": "/docs/index-test.html"
  }
  ,"12": {
    "title": "简介",
    "content": "专注于编写好的文档 . 只是文档为您的文档提供了一个快速响应的Jekyll主题的入门指南，该主题易于自定义并托管在GitHub Pages. . 现在开始 在GitHub上查看 . . 入门 . 依赖关系 . 只是Docs是为静态站点生成器Jekyll构建的. 查看 快速入门指南 以获取更多信息. 只是Docs不需要特殊的插件,并且可以在GitHub Pages的标准Jekyll编译器上运行. 该Jekyll SEO Tag plugin默认情况下（无需运行任何特殊安装）注入SEO和开放图元数据的文档页面包括在内. 有关如何配置SEO和打开图元数据的信息, 请访问Jekyll SEO标签使用指南. . 快速入门: 用作GitHub Pages远程主题 . 在 _config.yml设置远程主题到您的Jekyll网站. remote_theme: pmarsceill/just-the-docs . 您必须在仓库中启用GitHub Pages, 一个或多个Markdown文件以及一个 _config.yml 文件. 查看示例存储库 . | 本地安装: 使用基于gem的主题 . 安装Ruby Gem $ gem install just-the-docs . # .. or add it to your your Jekyll site’s Gemfile gem &quot;just-the-docs&quot; . | 仅将文档添加到您的Jekyll网站的 _config.yml theme: &quot;just-the-docs&quot; . | 可选: 初始化搜索数据 (创建 search-data.json) $ bundle exec just-the-docs rake search:init . | 运行本地Jekyll服务器 $ jekyll serve . # .. 或者如果您使用的是Gemfile (bundler) $ bundle exec jekyll serve . | 在浏览器打开 http://localhost:4000 | 如果您将站点托管在GitHub Pages上, 请在本地设置GitHub Pages和Jekyll, 以便您可以更轻松地在开发环境中工作. . 仅配置文档 . [查看配置选项] | . . 关于该项目 . Just the Docs 是 © 2017-2019 by Patrick Marsceill. . License执照 . Just the Docs 是由 MIT license分发的. .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"13": {
    "title": "指令",
    "content": "Swift 指令 .",
    "url": "http://localhost:4000/Node/instruction",
    "relUrl": "/Node/instruction"
  }
  ,"14": {
    "title": "标签",
    "content": "Labels . 使用标签作为在文档的一部分中添加额外标记的方法. 标签有几种颜色. 默认情况下,标签将为蓝色. . 默认标签 . 蓝色标签 . 稳定 . 新品发布 . 快来了 . 不推荐使用 . 默认标签 {: .label } 蓝色标签 {: .label .label-blue } 稳定 {: .label .label-green } 新品发布 {: .label .label-purple } 快来了 {: .label .label-yellow } 不推荐使用 {: .label .label-red } .",
    "url": "http://localhost:4000/docs/ui-components/labels.html",
    "relUrl": "/docs/ui-components/labels.html"
  }
  ,"15": {
    "title": "Layout",
    "content": "Layout Utilities . . Spacing | Vertical Alignment | Display | . Spacing . These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. . Classname prefix What it does . .m- | margin | . .mx- | margin-left, margin-right | . .my- | margin top, margin bottom | . .mt- | margin-top | . .mr- | margin-right | . .mb- | margin-bottom | . .ml- | margin-left | . Classname prefix What it does . .p- | padding | . .px- | padding-left, padding-right | . .py- | padding top, padding bottom | . .pt- | padding-top | . .pr- | padding-right | . .pb- | padding-bottom | . .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . Spacer/suffix Size in rems Rem converted to px . 1 | 0.25rem | 4px | . 2 | 0.5rem | 8px | . 3 | 0.75rem | 12px | . 4 | 1rem | 16px | . 5 | 1.5rem | 24px | . 6 | 2rem | 32px | . 7 | 2.5rem | 40px | . 8 | 3rem | 48px | . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . Vertical Alignment . Classname What it does . .v-align-baseline | vertical-align: baseline | . .v-align-bottom | vertical-align: bottom | . .v-align-middle | vertical-align: middle | . .v-align-text-bottom | vertical-align: text-bottom | . .v-align-text-top | vertical-align: text-top | . .v-align-top | vertical-align: top | . Display . Display classes aid in adapting the layout of the elements on a page: . Class   . .d-block | display: block | . .d-flex | display: flex | . .d-inline | display: inline | . .d-inline-block | display: inline-block | . .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } .",
    "url": "http://localhost:4000/docs/utilities/layout.html",
    "relUrl": "/docs/utilities/layout.html"
  }
  ,"16": {
    "title": "列表",
    "content": "Lists . 目录 . 无序列表 | 清单列表 | 任务列表 | 自定义列表 | . 大多数列表可以使用纯Markdown呈现. . 无序列表 . Item 1 | Item 2 | Item 3 | . or . Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . 清单列表 . Item 1 | Item 2 | Item 3 | 1. Item 1 1. Item 2 1. Item 3 . 任务列表 . 你好, 这是个待办事项 | 你好, 这是另一个待办事项 | 再见, 这个项目完成了 | . - [ ] 你好, 这是个待办事项 - [ ] 你好, 这是另一个待办事项 - [x] 再见, 这个项目完成了 . 自定义列表 . 定义列表需要HTML语法, 并且GitHub Flavored Markdown编译器不支持定义列表. . 姓名 莫子铭 生日 1952 出生地 茂名 颜色 黄色 &lt;dl&gt; &lt;dt&gt;姓名&lt;/dt&gt; &lt;dd&gt;莫子铭&lt;/dd&gt; &lt;dt&gt;生日&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;出生地&lt;/dt&gt; &lt;dd&gt;茂名&lt;/dd&gt; &lt;dt&gt;颜色&lt;/dt&gt; &lt;dd&gt;黄色&lt;/dd&gt; &lt;/dl&gt; .",
    "url": "http://localhost:4000/docs/ui-components/lists.html",
    "relUrl": "/docs/ui-components/lists.html"
  }
  ,"17": {
    "title": "导航结构",
    "content": "导航结构 . 目录 . 主导航 | 订制页面 | 排除页面 | 子页面 子页面 | 自动生成目录 | 子页面的子页面 | | 辅助导航 | 目录中的页内导航 | . 主导航 . Just the Docs站点的主要导航在大屏幕页面的左侧, 在小屏幕顶部(点击后). 主导航的结构可以适应多级菜单系统(带有子页面的页面). . 默认情况下，除非定义了父页面，否则所有页面将在主导航中显示为顶级页面(请参阅 带子页面). . . 订制页面 . 要指定页面顺序, 请nav_order在页面的YAML前题中使用参数. . 例 . layout: default title: Customization nav_order: 4 . . 排除页面 . 对于您不希望包含在主导航中的特定页面, 例如404页面或登录页面, 请nav_exclude: true在该页面的YAML前题中使用该参数。 . 例 . layout: default title: 404 nav_exclude: true . . 子页面 . 有时您会想要创建一个包含许多子项的页面(一个部分). 首先,建议您将目录中相关的页面放在一起……例如, 在这些文档中, 我们将所有书面文档保留在./docs目录中, 并将每个部分保留在子目录, 如./docs/ui-components 和./docs/utilities. 这给了我们一个像这样的组织结构: . +-- .. |-- (Jekyll files) | |-- docs | |-- ui-components | | |-- index.md (parent page) | | |-- buttons.md | | |-- code.md | | |-- labels.md | | |-- tables.md | | +-- typography.md | | | |-- utilities | | |-- index.md (parent page) | | |-- color.md | | |-- layout.md | | |-- responsive-modifiers.md | | +-- typography.md | | | |-- (other md files, pages with no children) | +-- .. | |-- (Jekyll files) +-- .. . 在父页面上, 添加以下YAML前题参数: . has_children: true (告诉我们这是一个父页面) | . 例 . layout: default title: UI Components nav_order: 2 has_children: true . 在这里, 我们设置了UI组件登录页面, 该页面可在处找到/docs/ui-components, 该页面具有子项, 在主导航中排名第二. . 子页面 . 在子页面上, 只需将parent: YAML 前端问题设置为父页面的标题即可, 并​​设置导航顺序(此数字现在位于本节中). . 例 . layout: default title: parent: UI Components nav_order: 2 . &quot;Buttons&quot;页面显示为&quot;UI Components&quot;的子级, 并在&quot;UI Components&quot;部分中排第二. . 自动生成目录 . 默认情况下, 所有带有子页面的页面都会自动附加一个目录, 该目录在父页面内容之后列出子页面。要禁用此自动目录, 请has_toc: false在父页面的YAML前端设置. . 例 . layout: default title: UI Components nav_order: 2 has_children: true has_toc: false . 子页面的子页面 . 子页面也可以有子页面(孙子). 这可以通过在子页面和孙子页面上使用类似的模式来实现. . 将has_children属性添加到子级. | 将parent 和 grand_parent 属性添加到孙子. | 例 . layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true . layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 . 这将创建以下导航结构: . +-- .. | |-- UI Components | |-- .. | | | |-- Buttons | | |-- Button Child Page | | | |-- .. | +-- .. . . 辅助导航 . 要将辅助导航项添加到您的站点(在所有页面的右上角), 请将其添加到站点文件的aux_nav 配置选项 _config.yml中. . 例 . # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/pmarsceill/just-the-docs&quot; . . 目录中的页内导航 . 要在文档页面上生成目录，您可以在Markdown中使用{:toc}Kramdown中的方法&lt;ol&gt;. 这将自动根据标题和标题级别生成指向页面各个部分的锚链接的有序列表. 在某些情况下, 您可能正在使用标题而又不想将其显示在目录中, 因此可以使用{: .no_toc }CSS类跳到特定的标题. . 例 . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . 此示例跳过目录中的页面名称标题(#), 以及内容列表本身(##)的标题, 因为它是多余的, 后面是目录本身. .",
    "url": "http://localhost:4000/docs/navigation-structure.html",
    "relUrl": "/docs/navigation-structure.html"
  }
  ,"18": {
    "title": "Responsive Modifiers",
    "content": "Responsive modifiers . Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. . Modifier Screen size . (none) | All screens until the next modifier | . xs | 320px (20rem) and up | . sm | 500px (31.25rem) and up | . md | 740px (46.25rem) and up | . lg | 1120px (70rem) and up | . xl | 1400px (87.5rem) and up | .",
    "url": "http://localhost:4000/docs/utilities/responsive-modifiers.html",
    "relUrl": "/docs/utilities/responsive-modifiers.html"
  }
  ,"19": {
    "title": "Search",
    "content": "Search . . Set up search Generate search index | Enable search in configuration | | Hiding pages from search | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . Page title | Page content | Page URL | . Set up search . Generate search index . Before you can use search, you must initialize the feature by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually in the assets/js/ directory of your Jekyll site with this content: . { {% assign comma = false %} {% for page in site.html_pages %}{% if page.search_exclude != true %}{% if comma == true%},{% endif %}&quot;{{ forloop.index0 }}&quot;: { &quot;title&quot;: &quot;{{ page.title | replace: &#39;&amp;amp;&#39;, &#39;&amp;&#39; }}&quot;, &quot;content&quot;: &quot;{{ page.content | markdownify | replace: &#39;&lt;/h&#39;, &#39; . &lt;/h&#39; | replace: &#39;&lt;hr&#39;, &#39; . &lt;hr&#39; | replace: &#39;&lt;/p&#39;, &#39; . &lt;/p&#39; | replace: &#39;&lt;/ul&#39;, &#39; . &lt;/ul&#39; | replace: &#39;&lt;/tr&#39;, &#39; . &lt;/tr&#39; | replace: &#39;&lt;/li&#39;, &#39; | &lt;/li&#39; | replace: &#39;&lt;/td&#39;, &#39; | &lt;/td&#39; | strip_html | escape_once | remove: &#39;&#39; | remove: &#39;&#39; | remove: &#39;&#39; | replace: &#39; &#39;, &#39; &#39; | replace: &#39; . &#39;, &#39; . &#39; | replace: &#39; . &#39;, &#39; . &#39; | normalize_whitespace }}&quot;, &quot;url&quot;: &quot;{{ page.url | absolute_url }}&quot;, &quot;relUrl&quot;: &quot;{{ page.url }}&quot; }{% assign comma = true %} {% endif %}{% endfor %} } . Note: If you don’t run this rake command or create this file manually, search will not work (or it will use the search index data from this docs site, not your site’s content). . Enable search in configuration . In your site’s _config.yml, enable search: . # Enable or disable the site search search_enabled: true . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator search_tokenizer_separator: /[ s/]+/ . Hiding pages from search . Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . layout: default title: Page not found nav_exclude: true search_exclude: true .",
    "url": "http://localhost:4000/docs/search.html",
    "relUrl": "/docs/search.html"
  }
  ,"20": {
    "title": "表",
    "content": "Tables . 默认情况下, 表是响应式的, 允许宽表具有水平滚动以访问普通视口之外的列. . 头部1 头部2 头部3 . 好 | 瑞典鱼 | 不错 | . 缺货 | 很多鱼 | 不错 | . 好 | 好 oreos | 嗯 | . 好 | 好 zoute 滴 | 很好 | . | 头部1 | 头部2 | 头部3 | |:-|:|:-| | 好 | 瑞典鱼 | 不错 | | 缺货 | 很多鱼 | 不错 | | 好 | 好 `oreos` | 嗯 | | 好 | 好 `zoute` 滴 | 很好 | .",
    "url": "http://localhost:4000/docs/ui-components/tables.html",
    "relUrl": "/docs/ui-components/tables.html"
  }
  ,"21": {
    "title": "样式",
    "content": "样式 . 目录 . 字体堆栈 | 响应式量表 | 标题 | 文章主体 | 内联元素 | 印刷实用程序 | . 字体堆栈 . 默认情况下, Just the Docs 使用本地系统字体堆栈来处理 sans-serif 字体: . -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . 对于等宽字体类型, 例如代码段或 &lt;pre&gt; 元素, Just the Docs 将本机系统字体堆栈用于等宽字体: . &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . . 响应式量表 . Just the Docs 使用的响应类型比例会根据视口大小而变化. . 选择器 屏幕尺寸小 font-size 大屏幕尺寸 font-size . h1, .text-alpha | 32px | 36px | . h2, .text-beta | 18px | 24px | . h3, .text-gamma | 16px | 18px | . h4, .text-delta | 14px | 16px | . h5, .text-epsilon | 16px | 18px | . h6, .text-zeta | 18px | 24px | . body | 14px | 16px | . . 标题 . 标题呈现如下: . Heading 1 . Heading 2 . Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . . 文章主体 . 默认的正文文本呈现如下: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . . 内联元素 . Text can be bold, italic, or strikethrough. . 链接到另一个页面. . Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). . . 印刷实用程序 . 有许多特定的印刷CSS类, 可让您覆盖字体大小, 字体粗细, 行高和大写字母的默认样式. . 查看排版实用程序 .",
    "url": "http://localhost:4000/docs/ui-components/typography.html",
    "relUrl": "/docs/ui-components/typography.html"
  }
  ,"22": {
    "title": "Typography",
    "content": "Typography Utilities . . Font size | Font weight | Line height | . Font size . Use the .fs-1 - .fs-10 to set an explicit font-size. . Class Small screen size font-size Large screen size font-size . .fs-1 | 9px | 10px | . .fs-2 | 11px | 12px | . .fs-3 | 12px | 14px | . .fs-4 | 14px | 16px | . .fs-5 | 16px | 18px | . .fs-6 | 18px | 24px | . .fs-7 | 24px | 32px | . .fs-8 | 32px | 38px | . .fs-9 | 38px | 42px | . .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . Font weight . Use the .fw-300 - .fw-700 to set an explicit font-size. . Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . Line height . Use the lh- classes to explicitly apply line height to text. . Class line-height value Notes . .lh-0 | 0 |   | . .lh-tight | 1.1 | Default for headings | . .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } .",
    "url": "http://localhost:4000/docs/utilities/typography.html",
    "relUrl": "/docs/utilities/typography.html"
  }
  ,"23": {
    "title": "UI组件",
    "content": "UI组件 . 为了尽可能轻松地用纯Markdown编写文档, 大多数UI组件都使用默认的Markdown元素设置样式, 而很少需要其他CSS类. .",
    "url": "http://localhost:4000/docs/ui-components",
    "relUrl": "/docs/ui-components"
  }
  ,"24": {
    "title": "Utilities",
    "content": "Utilities . CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. .",
    "url": "http://localhost:4000/docs/utilities",
    "relUrl": "/docs/utilities"
  }
  
}